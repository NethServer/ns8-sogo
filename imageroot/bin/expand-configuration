#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import os
import json
import agent
import agent.tasks
import socket

from jinja2 import Environment, FileSystemLoader, select_autoescape

files =["config/sogo.conf","config/SOGo.conf"]
for f in files:
    try:
        os.remove(f)
    except FileNotFoundError:
        pass

jenv = Environment(
    loader=FileSystemLoader(os.getenv("AGENT_INSTALL_DIR")+"/templates"),
    autoescape=select_autoescape(),
    keep_trailing_newline=True,
)

properties = {
    "admin_users" : os.environ['ADMIN_USERS'],
    "ldap_schema" : os.environ['SOGO_LDAP_SCHEMA'],
    "ldap_port" : int(os.environ['SOGO_LDAP_PORT']),
    "ldap_user" : os.environ['SOGO_LDAP_USER'],
    "ldap_password" : os.environ['SOGO_LDAP_PASS'],
    "ldap_base" : os.environ['SOGO_LDAP_BASE'],
    "imap_port":os.environ['SOGO_IMAP_PORT'],
    "smtp_port":os.environ['SOGO_SMTP_PORT'],
    "mail_server":os.environ['SOGO_SMTP_SERVER'],
    "mail_domain":os.environ['MAIL_DOMAIN'],
    "workers_count":os.environ['WOWORKERSCOUNT'],
    "auxiliary_account": 'YES' if os.environ['AUXILIARYACCOUNT'] == 'True' else 'NO',
    "active_sync": True if os.environ['ACTIVESYNC'] == 'True' else False,
    "dav": True if os.environ['DAV'] == 'True' else False,
    "draftsfolder": os.environ['DRAFTSFOLDER'],
    "sogofolderssendemailnotifications": os.environ['SOGOFOLDERSSENDEMAILNOTIFICATIONS'],
    "sogoaclssendemailnotifications": os.environ['SOGOACLSSENDEMAILNOTIFICATIONS'],
    "sogoappointmentsendemailnotifications": os.environ['SOGOAPPOINTMENTSENDEMAILNOTIFICATIONS'],
    "sogoenableemailalarms": os.environ['SOGOENABLEEMAILALARMS'],
    "sogointernalsyncinterval": os.environ['SOGOINTERNALSYNCINTERVAL'],
    "sogomaximumpinginterval": os.environ['SOGOMAXIMUMPINGINTERVAL'],
    "sogomaximumsyncinterval": os.environ['SOGOMAXIMUMSYNCINTERVAL'],
    "sogomaximumsyncresponsesize": os.environ['SOGOMAXIMUMSYNCRESPONSESIZE'],
    "sogomaximumsyncwindowsize": os.environ['SOGOMAXIMUMSYNCWINDOWSIZE'],
    "sentfolder": os.environ['SENTFOLDER'],
    "sessionduration": os.environ['SESSIONDURATION'],
    "sxvmemlimit": os.environ['SXVMEMLIMIT'],
    "timezone": os.environ['TIMEZONE'],
    "trashfolder": os.environ['TRASHFOLDER'],
    "wowatchdogrequesttimeout": os.environ['WOWATCHDOGREQUESTTIMEOUT']
}

template = jenv.get_template('sogo.conf')
output = template.render(properties)
with open("config/sogo.conf","w") as f:
    f.write(output)

# build httpd config
properties = {
    "domain": os.environ['TRAEFIK_HOST'],
    "active_sync": True if os.environ['ACTIVESYNC'] == 'True' else False,
    "dav": True if os.environ['DAV'] == 'True' else False
}

template = jenv.get_template('SOGo.conf')
output = template.render(properties)
with open("config/SOGo.conf","w") as f:
    f.write(output)

# build cron config
properties = {
    "backuptime": os.environ['BACKUPTIME'],
    "sessionduration": os.environ['SESSIONDURATION']
}

template = jenv.get_template('cron.conf')
output = template.render(properties)
with open("config/cron-sogo","w") as f:
    f.write(output)
